{"version":3,"sources":["serviceWorker.js","robots.js","Card.js","CardList.js","SearchBox.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","robots","id","name","username","email","Card","_ref","react_default","a","createElement","className","src","concat","alt","CardList","CardArray","map","value","i","src_Card","key","SearchBox","onSearchChange","type","placeholder","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","setState","searchfield","target","state","_this2","filteredRobots","filter","toLowerCase","includes","src_SearchBox","src_CardList","Component","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oLAUoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,qEChBOC,EAAS,CACpB,CACEC,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,8DC1CIC,EAZF,SAAAC,GAAoB,IAAlBL,EAAkBK,EAAlBL,GAAGC,EAAeI,EAAfJ,KAAKE,EAAUE,EAAVF,MAEtB,OACCG,EAAAC,EAAAC,cAAA,OAAKC,UAAY,uDAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA4BX,EAA5B,YAA0CY,IAAI,YACtDN,EAAAC,EAAAC,cAAA,UAAKP,GACLK,EAAAC,EAAAC,cAAA,UAAKL,KCQOU,EAhBE,SAAAR,GAAc,IAAZN,EAAYM,EAAZN,OAEXe,EAAYf,EAAOgB,IAAI,SAACC,EAAMC,GAEnC,OAAOX,EAAAC,EAAAC,cAACU,EAAD,CAAMC,IAAOF,EAAGjB,GAAMD,EAAOkB,GAAGjB,GAAGC,KAAMF,EAAOkB,GAAGhB,KAAME,MAAOJ,EAAOkB,GAAGd,UAEnF,OAECG,EAAAC,EAAAC,cAAA,WAAMM,ICKOM,EAZG,SAAAf,GAAqB,IAAnBgB,EAAmBhB,EAAnBgB,eAGnB,OACCf,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOC,UAAY,mCAAmCa,KAAO,SAC7DC,YAAY,cAAcC,SAAYH,MCmCzBI,qBAnCd,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QASFR,eAAiB,SAACY,GACjBP,EAAKQ,SAAS,CAACC,YAAYF,EAAMG,OAAOpB,SATvCU,EAAKW,MAAM,CACVtC,OAAOA,EACPoC,YAAY,IAJDT,wEAkBL,IAAAY,EAAAT,KACDU,EAAiBV,KAAKQ,MAAMtC,OAAOyC,OAAO,SAACzC,GAClD,OAAOA,EAAOE,KAAKwC,cAAcC,SAASJ,EAAKD,MAAMF,YAAYM,iBAGhE,OACCnC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,MACjBH,EAAAC,EAAAC,cAAA,MAAIC,UAAY,aAAhB,gBACAH,EAAAC,EAAAC,cAACmC,EAAD,CAAWtB,eAAkBQ,KAAKR,iBAClCf,EAAAC,EAAAC,cAACoC,EAAD,CAAU7C,OAAUwC,YA5BLM,cCFlBC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,CAAKjD,OAAQA,IAAYkD,SAASC,eAAe,SNkH3D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7dc1dafc.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React from 'react';\n\n\n\n\nconst Card = ({id,name,email}) =>{\n\n\treturn(\n\t\t<div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img src = {`https://robohash.org/${id}?200x200`} alt='profile'/>\n\t\t\t<h1>{name}</h1>\n\t\t\t<h2>{email}</h2>\n\t\t</div>\n\n\t\t)\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\n\t\tconst CardArray = robots.map((value,i)=>{\n\n\t\t\treturn <Card key = {i} id = {robots[i].id}name={robots[i].name} email={robots[i].email} />\n\t\t})\n\treturn(\n\n\t\t<div>{CardArray}</div>\n\n\t\t)\n\n\n\n}\n\nexport default CardList;","import React from 'react';\n\n\n\nconst SearchBox = ({onSearchChange}) =>{\n\n\n\treturn(\n\t\t<div>\n\t\t<input className = 'pa3 ba b--green bg-lightest-blue' type = 'search' \n\t\tplaceholder='Robo Search' onChange = {onSearchChange}/>\n\t\t</div>\n\n\t\t)\n}\n\nexport default SearchBox;","import React, {Component} from 'react';\nimport CardList from './CardList';\nimport {robots} from './robots';\nimport SearchBox from './SearchBox';\nimport './App.css'\n\n\n\n\nclass App extends Component{\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state={\n\t\t\trobots:robots,\n\t\t\tsearchfield:''\n\t\t}\n\n\n\t}\n\nonSearchChange = (event)=>{\n\tthis.setState({searchfield:event.target.value})\n\n}\n\n\n\n\n\trender(){\n\t\tconst filteredRobots = this.state.robots.filter((robots)=>{\n\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n})\n\n\t\treturn(\n\t\t\t<div className = 'tc'>\n\t\t\t<h1 className = 'header f1'>ROBO-FRIENDS</h1>\n\t\t\t<SearchBox onSearchChange = {this.onSearchChange}/>\n\t\t\t<CardList robots = {filteredRobots} />\n\t\t\t</div>\n\t\t\t)\n\t}\n\n\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {robots} from './robots';\nimport App from './App';\nReactDOM.render(<App robots={robots} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}